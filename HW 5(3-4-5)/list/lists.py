# Списки:
# 1. Создайте два любых списка и свяжите их с переменными.
from typing import List

l_1 = [1, 2, 3, 4, 5, 6]
l_2 = [0, 5, 0, 5, 7, 9]

# 2. Извлеките из первого списка второй элемент.
def value():
    """
    Returns 2nd elem of first list
    """
    return l_1[1]


print(f"Список после извлечения первого элемента {value()}")

# 3. Измените во втором списке последний элемент. Выведите список на экран.
def change_value():
    """
    Change last elem of second list
    """
    l_2[-1] = 10
    return l_2

print(f"Список после изменения последнего элемента  {change_value()}")

# 4. Соедините оба списка в один, присвоив результат новой переменной. Выведите
# получившийся список на экран.
def test():
    """
    One lists
    """
    l_3 = l_1 + l_2
    return l_3


print(f"Соеденен в один  {test()}")

# 5. "Снимите" срез из соединенного списка так, чтобы туда попали некоторые части
# обоих первых списков. Срез свяжите с очередной новой переменной. Выведите
# значение этой переменной.
def slice():
    """
    slice
    """
    list_5 = l_3()
    return list_5[::3]

print(f"Срез с соедененного списка {slice()}")

# 6. Добавьте в список два новых элемента и снова выведите его.
def add_elements():
    """
    Add 2 elements
    """
    new_lst = l_3()
    new_lst.append(11)
    new_lst.append(14)
    return new_lst


print(f"Список с добавлением двух элементов {add_elements()}")

# 7. Даны списки:
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].
# Нужно вернуть список, который состоит из элементов, общих для этих двух
# списков. -- !не использовать циклы
def merged_list():
    """
    Returns unique elems from 2 lists
    """
    new_l_1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
    new_l_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    merged_unique_l = set(new_l_1 + new_l_2)
    return list(merged_unique_l)
print(f"TОбщие элементы с двух списков {merged_list()}")

# 8. Есть список: [1, 2, 3, 4, 3, 2, 5, 1, 4, 6, 7, 1, 8, 2, 3] оставить в нем только уникальные
# значения. !не использовать циклы
def unique_value(*args):
    """
    Returns unique elems of list
    """
    unique_l_1 = set(args)
    return list(unique_l_1)


print(f"Уникальные значения {unique_value(1, 2, 3, 4, 3, 2, 5, 1, 4, 6, 7, 1, 8, 2, 3)}")
